# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
config.load_autoconfig()

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {'q': 'close', 'qa': 'quit', 'w': 'session-save', 'wq': 'quit --save', 'wqa': 'quit --save'}

# Backend to use to display websites. qutebrowser supports two different
# web rendering engines / backends, QtWebKit and QtWebEngine. QtWebKit
# was discontinued by the Qt project with Qt 5.6, but picked up as a
# well maintained fork: https://github.com/annulen/webkit/wiki -
# qutebrowser only supports the fork. QtWebEngine is Qt's official
# successor to QtWebKit. It's slightly more resource hungry than
# QtWebKit and has a couple of missing features in qutebrowser, but is
# generally the preferred choice.
# Type: String
# Valid values:
#   - webengine: Use QtWebEngine (based on Chromium).
#   - webkit: Use QtWebKit (based on WebKit, similar to Safari).
c.backend = 'webengine'

# Turn on Qt HighDPI scaling. This is equivalent to setting
# QT_AUTO_SCREEN_SCALE_FACTOR=1 or QT_ENABLE_HIGHDPI_SCALING=1 (Qt >=
# 5.14) in the environment. It's off by default as it can cause issues
# with some bitmap fonts. As an alternative to this, it's possible to
# set font sizes and the `zoom.default` setting.
# Type: Bool
c.qt.highdpi = True

# Time interval (in milliseconds) between auto-saves of
# config/cookies/etc.
# Type: Int
c.auto_save.interval = 15000

# Always restore open sites when qutebrowser is reopened.
# Type: Bool
c.auto_save.session = False

# Which cookies to accept. Note that with QtWebKit, only `all` and
# `never` are supported as per-domain values. Setting `no-3rdparty` or
# `no-unknown-3rdparty` per-domain on QtWebKit will have the same effect
# as `all`.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. Note that with QtWebKit, only `all` and
# `never` are supported as per-domain values. Setting `no-3rdparty` or
# `no-unknown-3rdparty` per-domain on QtWebKit will have the same effect
# as `all`.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://docs.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications', False, 'https://www.reddit.com')

# CSS border value for hints.
# Type: String
c.hints.border = '1px solid #310d0f'

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'https://www.google.com/'

# Search engines which can be used via the address bar.  Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` braces.  The following further
# placeholds are defined to configure how special characters in the
# search terms are replaced by safe characters (called 'quoting'):  *
# `{}` and `{semiquoted}` quote everything except slashes; this is the
# most   sensible choice for almost all search engines (for the search
# term   `slash/and&amp` this placeholder expands to `slash/and%26amp`).
# * `{quoted}` quotes all characters (for `slash/and&amp` this
# placeholder   expands to `slash%2Fand%26amp`). * `{unquoted}` quotes
# nothing (for `slash/and&amp` this placeholder   expands to
# `slash/and&amp`).  The search engine named `DEFAULT` is used when
# `url.auto_search` is turned on and something else than a URL was
# entered to be opened. Other search engines can be used by prepending
# the search engine name to the search term, e.g.  `:open google
# qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://www.google.com/search?q={}',
                       'i': 'https://duckduckgo.com/?q={}&iar=images&iax=images&ia=images',
                        'vic': 'https://la.wikipedia.org/w/index.php?search={}&title=Specialis%3AQuaerere',
                        'red': 'https://reddit.com/r/{}',
                        'tpb': 'http://thepiratebay.org/search/{}',
                        'andr': 'https://developer.android.com/develop/index.html?q={}',
                        'ghr': 'https://github.com/search?utf8=%E2%9C%93&q={}&type=',
                        'ghn': 'https://github.com/search?utf8=%E2%9C%93&q={}+in%3Aname&type=Repositories',
                        'ud': 'https://www.urbandictionary.com/define.php?term={}&utm_source=search-action',
                        'ddg': 'https://duckduckgo.com/?q={}&t=ha&iar=images',
                        'aw': 'https://wiki.archlinux.org/index.php?title=Special%3ASearch&search={}',
                        'yt': 'https://www.youtube.com/results?search_query={}',
                        'w': 'https://www.wikipedia.org/search-redirect.php?family=wikipedia&language=en&search={}&language=en&go=Go',
                        'sk': 'https://www.skytorrents.in/search/all/ed/1/?l=en-us&q={}',
                        'whl': 'https://alpha.wallhaven.cc/search?q={}&categories=111&purity=100&sorting=views&order=desc',
                        'whh': 'https://alpha.wallhaven.cc/search?q={}&categories=111&purity=100&atleast=2560x1440&sorting=views&order=desc&page=2',
                        'mup': 'https://musicpleer.to/#!{}',
}
# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://www.google.com/'

# Default zoom level.
# Type: Perc
c.zoom.default = '120%'

# Available zoom levels.
# Type: List of Perc
c.zoom.levels = ['30%', '40%', '50%', '80%', '100%', '110%', '100%', '110%', '125%', '150%', '175%', '200%', '250%', '300%', '400%', '500%']

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
# Type: List of QtColor, or QtColor
c.colors.completion.fg = ['#fa9730', '#fa9730', '#fa9730']

# Background color of the completion widget for odd rows.
# Type: QssColor
c.colors.completion.odd.bg = '#310d0f'

# Background color of the completion widget for even rows.
# Type: QssColor
c.colors.completion.even.bg = '#310d0f'

# Foreground color of completion widget category headers.
# Type: QtColor
c.colors.completion.category.fg = '#fa9730'

# Background color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.bg = 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #888888, stop:1 #505050)'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.top = '#310d0f'

# Bottom border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.bottom = '#310d0f'

# Foreground color of the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.fg = '#fa9730'

# Background color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.bg = '#8e5e36'

# Top border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.top = '#310d0f'

# Bottom border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.bottom = '#86462f'

# Foreground color of the matched text in the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.match.fg = '#8e5e36'

# Foreground color of the matched text in the completion.
# Type: QtColor
c.colors.completion.match.fg = '#8e5e36'

# Color of the scrollbar handle in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.fg = '#ffd653'

# Color of the scrollbar in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.bg = '#310d0f'

# Background color of disabled items in the context menu. If set to
# null, the Qt default is used.
# Type: QssColor
c.colors.contextmenu.disabled.bg = '#310d0f'

# Background color for the download bar.
# Type: QssColor
c.colors.downloads.bar.bg = '#310d0f'

# Color gradient start for download text.
# Type: QtColor
c.colors.downloads.start.fg = '#fa9730'

# Color gradient end for download text.
# Type: QtColor
c.colors.downloads.stop.fg = '#fa9730'

# Foreground color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.fg = '#fa9730'

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = '#020000'

# Font color for the matched part of hints.
# Type: QtColor
c.colors.hints.match.fg = '#020000'

# Foreground color of an error message.
# Type: QssColor
c.colors.messages.error.fg = '#0010fa'

# Border color of an error message.
# Type: QssColor
c.colors.messages.error.border = '#310d0f'

# Border color of a warning message.
# Type: QssColor
c.colors.messages.warning.border = '#310d0f'

# Background color of an info message.
# Type: QssColor
c.colors.messages.info.bg = '#310d0f'

# Border color of an info message.
# Type: QssColor
c.colors.messages.info.border = '#310d0f'

# Foreground color for prompts.
# Type: QssColor
c.colors.prompts.fg = '#fa9730'

# Border used around UI elements in prompts.
# Type: String
c.colors.prompts.border = '1px solid #310d0f'

# Foreground color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.fg = '#fa9730'

# Background color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.bg = '#310d0f'

# Foreground color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.fg = '#fa9730'

# Foreground color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.fg = '#fa9730'

# Foreground color of the statusbar in private browsing mode.
# Type: QssColor
c.colors.statusbar.private.fg = '#fa9730'

# Foreground color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.fg = '#fa9730'

# Background color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.bg = '#310d0f'

# Foreground color of the statusbar in private browsing + command mode.
# Type: QssColor
c.colors.statusbar.command.private.fg = '#fa9730'

# Foreground color of the statusbar in caret mode.
# Type: QssColor
c.colors.statusbar.caret.fg = '#fa9730'

# Foreground color of the statusbar in caret mode with a selection.
# Type: QssColor
c.colors.statusbar.caret.selection.fg = '#fa9730'

# Background color of the progress bar.
# Type: QssColor
c.colors.statusbar.progress.bg = '#5b0124'

# Default foreground color of the URL in the statusbar.
# Type: QssColor
c.colors.statusbar.url.fg = '#fa9730'

# Foreground color of the URL in the statusbar for hovered links.
# Type: QssColor
c.colors.statusbar.url.hover.fg = 'aqua'

# Foreground color of the URL in the statusbar on successful load
# (http).
# Type: QssColor
c.colors.statusbar.url.success.http.fg = '#fa9730'

# Background color of the tab bar.
# Type: QssColor
#c.colors.tabs.bar.bg = '#95591c'

# Foreground color of unselected odd tabs.
# Type: QtColor
#c.colors.tabs.odd.fg = '#fa9730'

# Foreground color of unselected even tabs.
# Type: QtColor
#c.colors.tabs.even.fg = '#fa9730'

# Background color of unselected even tabs.
# Type: QtColor
#c.colors.tabs.even.bg = '#08afff'

# Foreground color of selected odd tabs.
# Type: QtColor
#c.colors.tabs.selected.odd.fg = '#fa9730'

# Background color of selected odd tabs.
# Type: QtColor
#c.colors.tabs.selected.odd.bg = '#310130'

# Foreground color of selected even tabs.
# Type: QtColor
#c.colors.tabs.selected.even.fg = '#fa9730'

# Background color of selected even tabs.
# Type: QtColor
#c.colors.tabs.selected.even.bg = '#08afff'

# Foreground color of pinned unselected odd tabs.
# Type: QtColor
c.colors.tabs.pinned.odd.fg = '#fa9730'

# Foreground color of pinned unselected even tabs.
# Type: QtColor
c.colors.tabs.pinned.even.fg = '#fa9730'

# Foreground color of pinned selected odd tabs.
# Type: QtColor
c.colors.tabs.pinned.selected.odd.fg = '#fa9730'

# Background color of pinned selected odd tabs.
# Type: QtColor
c.colors.tabs.pinned.selected.odd.bg = '#310d0f'

# Foreground color of pinned selected even tabs.
# Type: QtColor
c.colors.tabs.pinned.selected.even.fg = '#fa9730'

# Background color for webpages if unset (or empty to use the theme's
# color).
# Type: QtColor
c.colors.webpage.bg = '#310d0f'

# Default font families to use. Whenever "default_family" is used in a
# font setting, it's replaced with the fonts listed here. If set to an
# empty value, a system-specific monospace default is used.
# Type: List of Font, or Font
c.fonts.default_family = 'mplus Nerd Font Mono'

# Default font size to use. Whenever "default_size" is used in a font
# setting, it's replaced with the size listed here. Valid values are
# either a float value with a "pt" suffix, or an integer value with a
# "px" suffix.
# Type: String
c.fonts.default_size = '12pt'

# Font used in the completion categories.
# Type: Font
c.fonts.completion.category = 'bold default_size default_family'

# Minimum logical font size (in pixels) that is applied when zooming
# out.
# Type: Int
c.fonts.web.size.minimum_logical = 8

# This setting can be used to map keys to other keys. When the key used
# as dictionary-key is pressed, the binding for the key used as
# dictionary-value is invoked instead. This is useful for global
# remappings of keys, for example to map Ctrl-[ to Escape. Note that
# when a key is bound (via `bindings.default` or `bindings.commands`),
# the mapping is ignored.
# Type: Dict
c.bindings.key_mappings = {'<Ctrl+6>': '<Ctrl+^>', '<Ctrl+Enter>': '<Ctrl+Return>', '<Ctrl+j>': '<Return>', '<Ctrl+m>': '<Return>', '<Ctrl+[>': '<Escape>', '<Enter>': '<Return>', '<Shift+Enter>': '<Return>', '<Shift+Return>': '<Return>'}
c.content.user_stylesheets = [
                             "~/.config/qutebrowser/gruvbox-dark-css/css/solarized-all-sites-dark.css",
                             "~/.config/qutebrowser/gruvbox-dark-css/css/solarized-google-dark.css",
                             #"~/.config/qutebrowser/gruvbox-dark-css/css/solarized-disqus-dark.css",
                             #"~/.config/qutebrowser/gruvbox-dark-css/css/solarized-duckduckgo-dark.css",
                             #"~/.config/qutebrowser/gruvbox-dark-css/css/solarized-generic-dark.css",
                             "~/.config/qutebrowser/gruvbox-dark-css/css/solarized-github-dark.css",
                             #"~/.config/qutebrowser/gruvbox-dark-css/css/solarized-hackernews-dark.css",
                             #"~/.config/qutebrowser/gruvbox-dark-css/css/solarized-lwn-dark.css",
                             #"~/.config/qutebrowser/gruvbox-dark-css/css/solarized-mediawiki-dark.css",
                             "~/.config/qutebrowser/gruvbox-dark-css/css/solarized-reddit-dark.css",
                             #"~/.config/qutebrowser/gruvbox-dark-css/css/solarized-sakai-dark.css",
                             "~/.config/qutebrowser/gruvbox-dark-css/css/solarized-stackexchange-dark.css"
                             ]
